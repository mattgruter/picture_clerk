Features
========

* Backup repo
  Add "backup" command that clones the repository to (multiple) pre-defined locations. The backup
  locations could be defined in a global configuration file (e.g. at ~/.pic/config). This is basically
  the same as a clone command. The only difference would be that the current repo acts as the origin
  and a remote url as the destination (clone)

* Split repo
  Possibility to split existing repository into multiple new repositories

* Portable index format
  Use human-readable & portable format for index on disk instead of pickle (e.g. json)

* Error messages
  Print sane error messages to CLI if repo is not initialized/unreadable, thumbnails don't exist, etc.

* Logging
  Don't log everything to repo log. Log only stuff relevant to repo: pics added/removed/edited, etc

* Changelog
  Implement a changelog for every action performed on a Picture or Repo
  instance. This could be achieved by providing a method decorator that does
  the necessary logging to a history log. Every log entry should consist of the
  method call with arguments (Python executable), a description of the action
  and the method call (with arguments) needed to undo the action.

  T.ex. in Repo

  @track_history(action='add(...)', descr=('added picture to index'),
  				 undo_action='del(...)')
  def add(self, picture):
  	<...>

* Track deleted pictures
  Keep track of deleted pictures, so that clones can be updated

* Logging
  Don't log everything to repo log. Log only stuff relevant to repo: pics added/removed/edited, etc

* CLI
  Better user feedback on CLI: progress reporting (see
  https://github.com/noamraph/tqdm), useful error messages, etc.


Tech
====

* Remove dependency on jhead
  Autorotate feature should be implemented in Python.

* Immutable objects
  Make Picture, PictureIndex, Config, Repo immutable objects if possible to
  simplify concurrent processing or use defensive copying if object have to
  be mutable.

* Dependency Injection
  Use dependency injection (e.g. snake-guice): http://www.connorgarvey.com/blog/?p=184


Known issues
============
* SSHConnector.open returns a context manager, not the file handle directly. The method can be used
inside a "with" statement-block, not otherwise. However it should be possible to use the method like
the Python's built-in open() method which returns an object that's both a context manager and a file
handle.
